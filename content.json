{"posts":[{"title":"","text":"概述 前后端一般通过接口文档来对接，目前主流的接口规范为OpenAPI 规范（OAS），后端可以通过整合Swagger（接口文档生成工具） + Knife4j （接口文档可视化界面工具）方便的管理和调试接口，前端可以根据接口文档请求后端数据 前端引入Typescript后，对类型定义需求最多的是接口的请求响应数据，然而当接口变多时根据swagger的数据结构转为type 或 interface的工作量非常大，且重复。如果直接any，TS就没意义了，也会少很多舒服的提示 如果可以根据后端类型自动转换为前端的typescript类型，可以减少很多工作量，并且避免人为操作失误 @umijs/openapi介绍 @umijs/openapi：可以根据swagger文档自动生成接口TS类型，甚至连前端请求接口的代码也可以自动生成。从而实现了前后端接口全部自动化的状态 该库是umi脚手架中的一个插件，pro中自动引入，其他版本可以手动引入插件。即使不是umi项目也可以手动安装依赖，也就是说是个通用的工具 后端生成swagger文档后，可以获得该文档的url地址作为配置项，插件就可以根据文档自动生成代码 可以生成mock文件供前端调试 后端接口改变时直接运行生成脚本，接口信息就同步了，非常方便 使用方法 项目中引入：npm i --save-dev @umijs/openapi，如果用了umi就用@umijs/plugin-openapi插件 新建配置文件：如果项目配置了&quot;type&quot;: &quot;module&quot;，后缀一定要是.cjs 1234567891011121314151617181920212223//根目录新建 script/config.cjsmodule.exports = { openApi: [ { requestLibPath: &quot;import request from '@/utils/request'&quot;, schemaPath:'your host', // openAPI规范地址 projectName: 'open-bff-patent', // 生成到哪个目录内 apiPrefix: '&quot;/open-bff-patent&quot;',// 需不需要增加前缀 serversPath: './src/service', // 生成代码到哪个目录 } ],};//根目录新建 script/openapi.cjsconst { generateService } = require('@umijs/openapi')const { openApi } = require('./config.js')async function run() { for (let index = 0; index &lt; openApi.length; index++) { await generateService(openApi[index]) }}run() 配置参数 属性 必填 备注 类型 默认值 requestLibPath 否 自定义请求方法路径（一般是自己封装的axois） string - requestImportStatement 否 自定义请求方法表达式 string - apiPrefix 否 api 的前缀 string - serversPath 否 生成的文件夹的路径 string - schemaPath 否 Swagger 2.0 或 OpenAPI 3.0 的地址 string - projectName 否 项目名称 string - namespace 否 命名空间名称 string API mockFolder 否 mock目录 string - enumStyle 否 枚举样式 string-literal &amp;#124; enum string-literal nullable 否 使用null代替可选 boolean false dataFields 否 response中数据字段 string[] - 在package.json添加执行脚本：&quot;openapi&quot;: &quot;node scripts/openapi.cjs&quot; 生成的接口请求代码示例 1234567891011121314/** 用户登陆 POST /user/login */export async function userLoginUsingPOST( body: API.UserLoginRequest, options?: { [key: string]: any },) { return request&lt;API.BaseResponseUser_&gt;('/user/login', { method: 'POST', headers: { 'Content-Type': 'application/json', }, data: body, ...(options || {}), });} \u0000","link":"/2023/04/22/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%92%8CTS%E7%B1%BB%E5%9E%8B%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/"}],"tags":[],"categories":[],"pages":[{"title":"about","text":"","link":"/about/index.html"}]}